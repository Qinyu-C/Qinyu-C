## The overall functions do a job of calculating inverse of a matrix without repeating calculation on same matrix


## makeCacheMatrix creates a special "matrix", which is really a list containing a function to

## set the value of the matrix

##　get the value of the　matrix

## set the value of the inverse

 ## get the value of the inverse

makeCacheMatrix <- function(x = matrix()) {
 inv <- NULL
  set <- function(y){
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setInverse <- function(solveMatrix) inv <<- solveMatrix
  getInverse <- function() inv
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}


## The following function calculates the inverse of the special "matrix" created with the above function. 
## However, it first checks to see if the inverse has already been calculated. 
## If so, it gets the inverse from the cache and skips the computation. 
 ## Otherwise, it calculates the inverse of the data and sets the value of the inverse in the cache via the setmean function.

## The stored data canbe used for further use

# this function takes the value from above function


cacheSolve <- function(x, ...) {
        inv <- x$getInverse()
  if(!is.null(inv)){
    message("getting cached data")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data)
  x$setInverse(inv)
  inv      
}


